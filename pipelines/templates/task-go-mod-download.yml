---
parameters:
  - name: workingDirectory
    type: string
    default: $(Build.SourcesDirectory)
steps:
  ####################
  # Windows Specific #
  ####################
  # The paths are different and the joining, so just seperating.
  - pwsh: |
      # $ENV:PATH="${ENV:HOME}/AppData/Local/aquaproj-aqua/bin;${ENV:PATH}" # ensure aqua managed binaries can be found on windows
      $ENV:PATH = '$(Agent.ToolsDirectory)/bin', $ENV:PATH -join [IO.Path]::PathSeparator
      Write-Host "Go binary used: $((Get-Command go -ErrorAction SilentlyContinue).Path)"
      go mod download -x
    displayName: go-mod-download-windows
    # condition: and(succeeded(), eq(variables.VENDORED, '0' )) # Only proceed with caching if vendoring is false
    workingDirectory: ${{ parameters.WorkingDirectory }}
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  - pwsh: |
      # $ENV:PATH="${ENV:HOME}/AppData/Local/aquaproj-aqua/bin;${ENV:PATH}" # ensure aqua managed binaries can be found on windows
      $ENV:PATH = '$(Agent.ToolsDirectory)/bin', $ENV:PATH -join [IO.Path]::PathSeparator
      Write-Host "Go binary used: $((Get-Command go -ErrorAction SilentlyContinue).Path)"
      go get -t -x -tags mage,build,integration -v ./...
    displayName: go-get-windows
    # condition: and(succeeded(), eq(variables.VENDORED, '0' )) # Only proceed with caching if vendoring is false
    workingDirectory: ${{ parameters.WorkingDirectory }}
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  ##############
  # NonWindows #
  ##############
  - pwsh: |
      try {
        # $ENV:PATH="${ENV:HOME}/.local/share/aquaproj-aqua/bin:${PATH}"
        $ENV:PATH="$(Agent.ToolsDirectory)/bin:${PATH}"
        Write-Host "Go binary used: $((Get-Command go -ErrorAction SilentlyContinue).Path)"
        go mod download -x
        exit 0
      }
      catch {
        throw
        exit 1
      }
    displayName: go-mod-download
    # condition: and(succeeded(), eq(variables.VENDORED, '0' )) # Only proceed with caching if vendoring is false
    workingDirectory: ${{ parameters.WorkingDirectory }}
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    failOnStderr: false # go gives false errors on this

  - pwsh: |
      try {
        $ENV:PATH = '$(Agent.ToolsDirectory)/bin', $ENV:PATH -join [IO.Path]::PathSeparator
        # # $ENV:PATH="${ENV:HOME}/.local/share/aquaproj-aqua/bin:${PATH}"
        # $ENV:PATH="$(Agent.ToolsDirectory)/bin:${PATH}"
        Write-Host "Go binary used: $((Get-Command go -ErrorAction SilentlyContinue).Path)"
        go get -t -x -tags mage,build,integration -v ./...
        exit 0
      }
      catch {
        throw
        exit 1
      }
    displayName: go-get
    # condition: and(succeeded(), eq(variables.VENDORED, '0' )) # Only proceed with caching if vendoring is false
    workingDirectory: ${{ parameters.WorkingDirectory }}
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    failOnStderr: false # go gives false errors on this
