---
parameters:
  - name: workingDirectory
    type: string
    default: $(System.DefaultWorkingDirectory)
  - name: AQUA_ROOT_DIR
    type: string
    default: ''
  - name: GOROOT
    type: string
  - name: GOPATH
    type: string
steps:
  - pwsh: |
      # $ENV:PATH = '$(Build.SourcesDirectory)/.cache/aqua/bin', $ENV:PATH -join [IO.Path]::PathSeparator
      try {
        &mage -version
        Write-Host "mage was found already, so not installing: $((Get-Command go -ErrorAction SilentlyContinue).Path)"
      }
      catch {
        write-Host "Trying to install mage as couldn't find"
        go install github.com/magefile/mage@latest
      }
      Write-Host "Compile mage for speedy invocation in pipelines with local binary"
      Write-Host ('[mage] binary: {0} version: {1}' -f $(Get-Command mage -ErrorAction SilentlyContinue).Path, [string]$(mage -version)) -ForegroundColor Gray
      &mage -f -debug -compile ./magec
      Write-Host "##vso[task.setvariable variable=MAGEPRECOMPILEDPATH]$(Resolve-Path ./magec -ErrorAction SilentlyContinue)"
    displayName: install-mage
    name: InstallMage
    workingDirectory: ${{ parameters.workingDirectory }}
    env:
      AQUA_ROOT_DIR: ${{ parameters.AQUA_ROOT_DIR }}
      GOROOT: ${{ parameters.GOROOT }}
      GOPATH: ${{ parameters.GOPATH }}
  # - pwsh: |
  #     # $ENV:PATH="${ENV:HOME}/AppData/Local/aquaproj-aqua/bin;${ENV:PATH}" # ensure aqua managed binaries can be found
  #     Write-Host "##vso[task.prependpath]${ENV:HOME}/AppData/Local/aquaproj-aqua"
  #     try {
  #       &mage -version
  #       Write-Host "mage was found already, so not installing: $((Get-Command go -ErrorAction SilentlyContinue).Path)"
  #     }
  #     catch {
  #       write-Host "Trying to install mage as couldn't find"
  #       go install github.com/magefile/mage@latest
  #     }
  #     echo "Compile mage for speedy invocation in pipelines with local binary"
  #     Write-Host "Mage binary used: $((Get-Command mage -ErrorAction SilentlyContinue).Path)"
  #     mage -f -debug -compile ./magec
  #     # Write-Host "##vso[task.setvariable variable=MAGEPRECOMPILEDPATH]$(Resolve-Path ./magec -ErrorAction SilentlyContinue)"
  #   displayName: install-mage-windows
  #   name: InstallMageWindows
  #   workingDirectory: ${{ parameters.workingDirectory }}
  #   condition: eq(variables['Agent.OS'], 'Windows_NT')

  # - bash: |
  #     # export PATH="${AQUA_ROOT_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua}/bin:$PATH"

  #     if command -v mage &>/dev/null; then
  #       echo "✔️️ mage detected"
  #     else
  #       echo "❌ mage command not recognized, will attempt to go install as backup method"
  #       go install github.com/magefile/mage@latest
  #     fi
  #     echo "Compile mage for speedy invocation in pipelines with local binary"
  #     echo "Mage binary used: $(which mage)"
  #     mage -f -debug -compile ${{ parameters.workingDirectory }}/magec
  #     echo "./magec realpath: $(realpath ./magec)"
  #     echo "##vso[task.setvariable variable=MAGEPRECOMPILEDPATH]$(realpath ./magec)"
  #   displayName: install-mage-linux-and-darwin
  #   name: InstallMageLinuxDarwin
  #   workingDirectory: ${{ parameters.workingDirectory }}
  #   condition: ne(variables['Agent.OS'], 'Windows_NT')
